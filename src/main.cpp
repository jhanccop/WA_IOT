/*
UBM analyzer version for unipetro abc
*/

/* ====================== LCD CONFIG ======================== */
#include <Arduino.h>

#define _Digole_Serial_I2C_
#include <DigoleSerial.h>

#include <Wire.h>
DigoleSerialDisp mydisp(&Wire, '\x27');

const unsigned char fonts[] = {6, 10, 18, 51, 120, 123};
const char *fontdir[] = {"0\xb0", "90\xb0", "180\xb0", "270\xb0"};

/* ====================== MQTT CONFIG ======================== */
#include <PubSubClient.h>

/* ========================== SEPARADOR ========================== */
#include <Average.h>
#include <Separador.h>

Separador s;

/* ********************** RESET POSITION *********************** */
void resetpos1(void) // for demo use, reset display position and clean the demo line
{
    mydisp.setPrintPos(0, 0, _TEXT_);
    delay(3000);                        // delay 2 seconds
    mydisp.println("                "); // display space, use to clear the demo line
    mydisp.setPrintPos(0, 0, _TEXT_);
}

/* ********************** LCD PREPARE *********************** */
void lcd_prepare(void)
{
    delay(100);
    mydisp.backLightOn();
    delay(100);
    mydisp.backLightOff();
    // mydisp.setColor(1);
    mydisp.clearScreen();
    mydisp.setFont(fonts[0]);
    uint8_t i = 2;
    mydisp.setRotation(i);
    mydisp.drawStr(0, 0, "RPC ANALYZER v1");
    mydisp.drawStr(20, 2, "SPM:");
    mydisp.drawLine(0, 6, 127, 6);
}

/* ******************* PRINT DATETIME  ********************** */
String print_datetime(boolean show)
{
    mydisp.setFont(fonts[0]);
    mydisp.setPrintPos(16, 0, _TEXT_);
    // DateTime now = rtc.now();
    // String year = String(now.year());
    // year.remove(0,2);
    // String datetime = year + "/" + String(now.month()) + "/" + String(now.day()) + " " + String(now.hour()) + ":" + String(now.minute());

    String datetime = "2022-12-23 08:56";
    if (show)
    {
        mydisp.print(datetime);
    }
    return datetime;
}

/* ******************* PRINT SPM  ********************** */
void print_SPM(float rpm)
{
    mydisp.setFont(fonts[0]);
    mydisp.setPrintPos(24, 2, _TEXT_);
    mydisp.print(rpm);
}

/* ******************* PRINT STATE  ********************** */
void print_state(String process, String rate, String cloud_state)
{
    mydisp.setFont(fonts[0]);
    mydisp.setPrintPos(20, 9, _TEXT_);
    mydisp.print("    ");
    mydisp.setPrintPos(20, 9, _TEXT_);
    mydisp.print(process);
    mydisp.setPrintPos(26, 9, _TEXT_);
    mydisp.print(rate);
    mydisp.setPrintPos(28, 9, _TEXT_);
    mydisp.print(cloud_state);
}

/* ******************* PRINT CLASS  ********************** */
void print_CLASS(String label)
{

    String row1 = s.separa(label, ' ', 0);
    String row2 = s.separa(label, ' ', 1);
    mydisp.setFont(fonts[1]);
    mydisp.setMode('|');
    // mydisp.setFont(120);
    mydisp.setPrintPos(13, 3, _TEXT_);
    mydisp.print(row1);
    mydisp.setPrintPos(13, 4, _TEXT_);
    mydisp.print(row2);
}

/* ************************* LCD 2 CURRENT STATE ************************ */
void printValue(String label, float value, int pos_x, int pos_y, int separe)
{

    mydisp.setPrintPos(pos_x, pos_y, _TEXT_);
    mydisp.print("             ");
    mydisp.setPrintPos(pos_x, pos_y, _TEXT_);
    mydisp.print(label);

    mydisp.setPrintPos(pos_x + separe, pos_y, _TEXT_);
    mydisp.print("       ");
    mydisp.setPrintPos(pos_x + separe, pos_y, _TEXT_);
    mydisp.print(value);
}

void currentState()
{
    mydisp.clearScreen();
    mydisp.setFont(fonts[0]);

    mydisp.drawStr(8, 0, "CURRENT  STATE");
    mydisp.drawLine(0, 6, 127, 6);

    printValue("Pump Fillage (%):", 90.78, 1, 2, 25);
    printValue("Pumping speed (spm):", 13.48, 1, 3, 25);
    printValue("Production today (bbl):", 124.56, 1, 5, 25);
    printValue("Tomorrow project (bbl):", 125.32, 1, 6, 25);
    printValue("Run Time today (hours):", 17.59, 1, 8, 25);
    
    
}

/* ************************* LCD 3 OVERVIEW REAL TIME ************************ */
void plotOverview(float pos, float load, float pos_pump, float load_pump)
{
    int x_surf = map(pos * 100, 0, 100, 2, 60);
    int y_surf = map(load * 100, 0, 100, 33, 10);
    mydisp.drawPixel(x_surf, y_surf);

    int x_pump = map(pos_pump * 100, 0, 100, 2, 60);
    int y_pump = map(load_pump * 100, 0, 100, 63, 35);
    mydisp.drawPixel(x_pump, y_pump);
}

void overview(float currentLoad, float currentPos, float peakLoad, float minLoad, float pumpFill, float spm)
{
    //mydisp.clearScreen();
    //mydisp.setFont(fonts[0]);

    print_datetime(true);

    printValue("Curr load:", currentLoad, 48, 2, 10);
    printValue("Curr pos:", currentPos, 48, 3, 10);

    printValue("Peak load:", peakLoad, 48, 4, 10);
    printValue("Min load:", minLoad, 48, 5, 10);

    printValue("Pump Fill:", pumpFill, 48, 4, 10);
    printValue("SPM:", spm, 48, 5, 10);

    float pos_pump = currentPos;
    float load_pump = currentLoad;

    plotOverview(currentPos, currentLoad, pos_pump, load_pump);
}

/* ************************* PLOTTER ************************ */
void plotter()
{

    int n_data = 300;
    yield();

    float pos_raw[300] = {1.39153571e-03, 2.78307143e-03, 4.38183333e-03, 5.98059524e-03,
                          8.31836905e-03, 1.06561429e-02, 1.34986548e-02, 1.63411667e-02,
                          1.96984643e-02, 2.30557619e-02, 2.71653810e-02, 3.12750000e-02,
                          3.59337738e-02, 4.05925476e-02, 4.58275476e-02, 5.10625476e-02,
                          5.65276667e-02, 6.19927857e-02, 6.79058452e-02, 7.38189048e-02,
                          8.04162500e-02, 8.70135952e-02, 9.38921548e-02, 1.00770714e-01,
                          1.08006655e-01, 1.15242595e-01, 1.22856262e-01, 1.30469929e-01,
                          1.38530643e-01, 1.46591357e-01, 1.63387143e-01, 1.71962976e-01,
                          1.80538810e-01, 1.89351071e-01, 1.98163333e-01, 2.07176893e-01,
                          2.16190452e-01, 2.25393607e-01, 2.34596762e-01, 2.44196702e-01,
                          2.53796643e-01, 2.63700524e-01, 2.73604405e-01, 2.83491929e-01,
                          2.93379452e-01, 3.03368690e-01, 3.13357929e-01, 3.23384655e-01,
                          3.33411381e-01, 3.43500857e-01, 3.53590333e-01, 3.63750095e-01,
                          3.73909857e-01, 3.84024607e-01, 3.94139357e-01, 4.04228036e-01,
                          4.14316714e-01, 4.24309524e-01, 4.34302333e-01, 4.44135571e-01,
                          4.53968810e-01, 4.73538095e-01, 4.83258583e-01, 4.92979071e-01,
                          5.02555679e-01, 5.12132286e-01, 5.21650357e-01, 5.31168429e-01,
                          5.40532857e-01, 5.49897286e-01, 5.59113405e-01, 5.68329524e-01,
                          5.77438167e-01, 5.86546810e-01, 5.95467071e-01, 6.04387333e-01,
                          6.13202631e-01, 6.22017929e-01, 6.30775310e-01, 6.39532690e-01,
                          6.48095893e-01, 6.56659095e-01, 6.65055095e-01, 6.73451095e-01,
                          6.81595798e-01, 6.89740500e-01, 6.97633345e-01, 7.05526190e-01,
                          7.13325131e-01, 7.21124071e-01, 7.36427452e-01, 7.43852393e-01,
                          7.51277333e-01, 7.58506083e-01, 7.65734833e-01, 7.72652619e-01,
                          7.79570405e-01, 7.86265893e-01, 7.92961381e-01, 7.99557905e-01,
                          8.06154429e-01, 8.12597655e-01, 8.19040881e-01, 8.25329500e-01,
                          8.31618119e-01, 8.37657214e-01, 8.43696310e-01, 8.49455821e-01,
                          8.55215333e-01, 8.60839500e-01, 8.66463667e-01, 8.71929274e-01,
                          8.77394881e-01, 8.82666440e-01, 8.87938000e-01, 8.93062881e-01,
                          8.98187762e-01, 9.03025274e-01, 9.07862786e-01, 9.12435143e-01,
                          9.17007500e-01, 9.25822738e-01, 9.29971440e-01, 9.34120143e-01,
                          9.38072905e-01, 9.42025667e-01, 9.45743119e-01, 9.49460571e-01,
                          9.52898143e-01, 9.56335714e-01, 9.59549774e-01, 9.62763833e-01,
                          9.65721548e-01, 9.68679262e-01, 9.71393155e-01, 9.74107048e-01,
                          9.76619333e-01, 9.79131619e-01, 9.81385083e-01, 9.83638548e-01,
                          9.85592310e-01, 9.87546071e-01, 9.89295714e-01, 9.91045357e-01,
                          9.92472845e-01, 9.93900333e-01, 9.95078310e-01, 9.96256286e-01,
                          9.97146702e-01, 9.98037119e-01, 9.99271952e-01, 9.99587381e-01,
                          9.99902810e-01, 9.99951405e-01, 1.00000000e+00, 9.99777857e-01,
                          9.99555714e-01, 9.99064952e-01, 9.98574190e-01, 9.97626619e-01,
                          9.96679048e-01, 9.95299964e-01, 9.93920881e-01, 9.92204952e-01,
                          9.90489024e-01, 9.88375167e-01, 9.86261310e-01, 9.83790786e-01,
                          9.81320262e-01, 9.78478226e-01, 9.75636190e-01, 9.72494333e-01,
                          9.69352476e-01, 9.65826202e-01, 9.62299929e-01, 9.58363071e-01,
                          9.54426214e-01, 9.50016202e-01, 9.45606190e-01, 9.40831714e-01,
                          9.36057238e-01, 9.26044357e-01, 9.20678964e-01, 9.15313571e-01,
                          9.09597250e-01, 9.03880929e-01, 8.97808012e-01, 8.91735095e-01,
                          8.85234048e-01, 8.78733000e-01, 8.71806131e-01, 8.64879262e-01,
                          8.57639357e-01, 8.50399452e-01, 8.42798893e-01, 8.35198333e-01,
                          8.27366750e-01, 8.19535167e-01, 8.11543595e-01, 8.03552024e-01,
                          7.95259405e-01, 7.86966786e-01, 7.78277881e-01, 7.69588976e-01,
                          7.60557798e-01, 7.51526619e-01, 7.42317488e-01, 7.33108357e-01,
                          7.23722560e-01, 7.14336762e-01, 6.94905452e-01, 6.84929917e-01,
                          6.74954381e-01, 6.65064452e-01, 6.55174524e-01, 6.46193988e-01,
                          6.37213452e-01, 6.28618821e-01, 6.20024190e-01, 6.11098798e-01,
                          6.02173405e-01, 5.92499762e-01, 5.82826119e-01, 5.74024369e-01,
                          5.65222619e-01, 5.56322750e-01, 5.47422881e-01, 5.36968393e-01,
                          5.26513905e-01, 5.16311679e-01, 5.06109452e-01, 4.95755000e-01,
                          4.85400548e-01, 4.74381083e-01, 4.63361619e-01, 4.52391869e-01,
                          4.41422119e-01, 4.30540024e-01, 4.19657929e-01, 4.09115619e-01,
                          3.98573310e-01, 3.78411381e-01, 3.68216036e-01, 3.58020690e-01,
                          3.47450298e-01, 3.36879905e-01, 3.26433655e-01, 3.15987405e-01,
                          3.06428345e-01, 2.96869286e-01, 2.88102583e-01, 2.79335881e-01,
                          2.70941905e-01, 2.62547929e-01, 2.53918548e-01, 2.45289167e-01,
                          2.36562464e-01, 2.27835762e-01, 2.19466143e-01, 2.11096524e-01,
                          2.02912524e-01, 1.94728524e-01, 1.86830262e-01, 1.78932000e-01,
                          1.70818167e-01, 1.62704333e-01, 1.54592536e-01, 1.46480738e-01,
                          1.38851190e-01, 1.31221643e-01, 1.16227786e-01, 1.08894214e-01,
                          1.01560643e-01, 9.49376905e-02, 8.83147381e-02, 8.21420357e-02,
                          7.59693333e-02, 7.00913333e-02, 6.42133333e-02, 5.87567262e-02,
                          5.33001190e-02, 4.81143095e-02, 4.29285000e-02, 3.87066071e-02,
                          3.44847143e-02, 3.09045476e-02, 2.73243810e-02, 2.38825952e-02,
                          2.04408095e-02, 1.75870000e-02, 1.47331905e-02, 1.22629524e-02,
                          9.79271429e-03, 7.80771429e-03, 5.82271429e-03, 4.28029762e-03,
                          2.73788095e-03, 1.74265476e-03, 7.47428571e-04, 0.00000000e+00};
    float load_raw[300] = {0.3606115, 0.33903414, 0.3922795, 0.4211483, 0.4550223,
                           0.47765988, 0.5050532, 0.5142181, 0.55885583, 0.5775468,
                           0.664648, 0.61376065, 0.6219772, 0.64155227, 0.66569746,
                           0.5580315, 0.5525977, 0.513313, 0.5420354, 0.59175265,
                           0.60140926, 0.6649601, 0.6495745, 0.6696029, 0.72067523,
                           0.7913527, 0.8353251, 0.8399867, 0.87123525, 0.8728295,
                           0.8833198, 0.91717243, 0.91462076, 0.8959379, 0.8569939,
                           0.88733065, 0.9412348, 0.9440607, 0.9583187, 0.95494676,
                           0.96113646, 0.952586, 0.9418225, 0.93997306, 0.90967417,
                           0.8680111, 0.8620733, 0.8669461, 0.804965, 0.8126818,
                           0.85008234, 0.84087443, 0.8198643, 0.8238918, 0.8124782,
                           0.8224453, 0.8103448, 0.7724205, 0.76821053, 0.7780187,
                           0.7744225, 0.80508965, 0.78776824, 0.76435626, 0.75493336,
                           0.7887965, 0.82779276, 0.8043143, 0.76733184, 0.79054946,
                           0.8029038, 0.8050232, 0.81068075, 0.82786775, 0.8838308,
                           0.88724387, 0.84669924, 0.8523105, 0.8588941, 0.8260691,
                           0.8537613, 0.8228015, 0.82802486, 0.8233645, 0.79121184,
                           0.7538272, 0.78828204, 0.79991925, 0.8268205, 0.81290245,
                           0.7727095, 0.7454257, 0.71291834, 0.7347312, 0.73392826,
                           0.73111475, 0.70487773, 0.7552767, 0.7180718, 0.7707094,
                           0.76444054, 0.80604535, 0.8300744, 0.8416637, 0.8173355,
                           0.8367058, 0.8187766, 0.8261168, 0.83926773, 0.82781243,
                           0.88463706, 0.8739078, 0.8764258, 0.861392, 0.8620511,
                           0.88500214, 0.8666898, 0.8242898, 0.7961605, 0.78832877,
                           0.80317485, 0.8004968, 0.79433334, 0.7513094, 0.8270639,
                           0.7746248, 0.787143, 0.76209223, 0.8075487, 0.78486955,
                           0.75595963, 0.80039084, 0.8045794, 0.78936183, 0.80841863,
                           0.8504063, 0.86570895, 0.8512932, 0.8607421, 0.86735165,
                           0.89415026, 0.8695968, 0.8573177, 0.85699606, 0.86738586,
                           0.8907181, 0.87729573, 0.88787436, 0.90686035, 0.8752161,
                           0.8547424, 0.84555656, 0.80298483, 0.79247785, 0.7872876,
                           0.78450334, 0.74554926, 0.70407027, 0.6369108, 0.59780383,
                           0.5532343, 0.45749414, 0.47528288, 0.431284, 0.41979182,
                           0.49753302, 0.46154612, 0.4573014, 0.43306053, 0.4715577,
                           0.5183486, 0.49342868, 0.4888159, 0.5233357, 0.51772344,
                           0.5160141, 0.539628, 0.49725333, 0.48841026, 0.4695868,
                           0.5233943, 0.56342995, 0.52499217, 0.5719448, 0.5258349,
                           0.46837407, 0.52440554, 0.49893892, 0.46065307, 0.5048745,
                           0.5165652, 0.44865412, 0.46483424, 0.5372943, 0.5606333,
                           0.4725001, 0.51316327, 0.5328481, 0.54023993, 0.4862748,
                           0.54036444, 0.5451182, 0.5074548, 0.60317874, 0.5545964,
                           0.53890127, 0.55679655, 0.60497975, 0.56109995, 0.587025,
                           0.59533197, 0.5318593, 0.60887045, 0.5648048, 0.4834313,
                           0.3977546, 0.31755555, 0.20914239, 0.15898412, 0.08423555,
                           0.07330677, 0.07761616, 0.09327832, 0.07639554, 0.09941348,
                           0.08002061, 0.09765211, 0.08518991, 0.06350625, 0.06660935,
                           0.08852655, 0.0969362, 0.14467105, 0.21598798, 0.27866432,
                           0.32346076, 0.42808956, 0.49052542, 0.44920576, 0.49967977,
                           0.5009391, 0.46910706, 0.47279832, 0.45726538, 0.47780937,
                           0.45358694, 0.35850388, 0.45474082, 0.46069658, 0.3786825,
                           0.37911958, 0.36964303, 0.2756323, 0.30942374, 0.20248419,
                           0.16962358, 0.16273305, 0.18048078, 0.14912087, 0.17688003,
                           0.15245947, 0.22473991, 0.2053492, 0.25939244, 0.22605795,
                           0.21223244, 0.21097353, 0.2266089, 0.27240372, 0.30615088,
                           0.3106324, 0.30006024, 0.39688137, 0.3661871, 0.4734667,
                           0.45800468, 0.38199878, 0.4207209, 0.4314303, 0.44544455,
                           0.4433374, 0.41029093, 0.45660704, 0.54108155, 0.50227606,
                           0.5470507, 0.53670824, 0.44938523, 0.3577729, 0.3025245,
                           0.30317277, 0.290632, 0.2333867, 0.2849285, 0.2302016,
                           0.25801674, 0.29357973, 0.3058403, 0.23381004, 0.3365273};

    //int pos_i = map(pos_raw[0] * 100, 0, 100, 2, 69);
    //int load_i = map(load_raw[0] * 100, 0, 100, 63, 10);

    for (int i = 1; i < n_data; i++)
    {

        overview(load_raw[i], pos_raw[i], 2345.67, 234.66, 67, 12.5);
            /*
            float pos_f = map(pos_raw[i]*100,0,100,2,69);//int(pos[i] * 100) + 6;
            int load_f = map(load_raw[i]*100,0,100,63,10);

            mydisp.drawLine(pos_i, load_i, pos_f, load_f);

            pos_i = pos_f;
            load_i = load_f;
            */
            delay(50);
    }
}

/* ******************* SETUP  ********************** */
void setup()
{
    mydisp.begin();
    delay(3000);
    lcd_prepare();

    mydisp.backLightOff(); // poweroff led background

    currentState();
    delay(5000);

    mydisp.clearScreen();
    mydisp.setFont(fonts[0]);

    //print_datetime(true);
    //print_SPM(6.64);
    //print_CLASS("FLUID POUND");
    plotter();
    //print_state("Local", "2", "run");
    Serial.begin(115200);
}

void loop()
{
}
